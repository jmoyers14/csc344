/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
JbcfilterAudioProcessorEditor::JbcfilterAudioProcessorEditor (JbcfilterAudioProcessor* ownerFilter)
    : AudioProcessorEditor (ownerFilter),
    infoLabel (String::empty),
    tLabel ("", "this math is so over my head lol."),
    delayLabel ("", "Delay:"),
    cutoffLabel ("", "Cutoff Frequency:"),
    delaySlider ("Delay"),
    cutoffSlider("cutoff freq")
{
    // This is where our plugin's editor size is set.
    addAndMakeVisible(delaySlider);
    delaySlider.setSliderStyle(Slider::Rotary);
    delaySlider.addListener(this);
    delaySlider.setRange(0.0, 1.0, 0.01);
    
    addAndMakeVisible(cutoffSlider);
    cutoffSlider.setSliderStyle(Slider::Rotary);
    cutoffSlider.addListener(this);
    cutoffSlider.setRange(1.0, 3000.0, 1.0);
    
  
    delayLabel.attachToComponent(&delaySlider, false);
    delayLabel.setFont(Font (14.0f));
  
    cutoffLabel.attachToComponent(&cutoffSlider, false);
    cutoffLabel.setFont(Font(14.0f));
    
    //add timer
    //addAndMakeVisible(infoLabel);
    //infoLabel.setColour(Label::textColourId, Colours::red);
    
    addAndMakeVisible(tLabel);
    infoLabel.setColour(Label::textColourId, Colours::pink);
    
    // add the triangular resizer component for the bottom-right of the UI
    addAndMakeVisible (resizer = new ResizableCornerComponent (this, &resizeLimits));
    resizeLimits.setSizeLimits (150, 150, 800, 300);
    
    // set our component's initial size to be the last one that was stored in the filter's settings
    setSize (ownerFilter->lastUIWidth,
             ownerFilter->lastUIHeight);
    startTimer (50);
    
                      
                    
    
    
    
}

JbcfilterAudioProcessorEditor::~JbcfilterAudioProcessorEditor()
{
}

//==============================================================================
void JbcfilterAudioProcessorEditor::paint (Graphics& g)
{
    g.setGradientFill (ColourGradient (Colours::white, 0, 0,
                                       Colours::grey, 0, (float) getHeight(), false));
    g.fillAll();
}

void JbcfilterAudioProcessorEditor::resized()
{
    infoLabel.setBounds (10, 4, 400, 25);
    delaySlider.setBounds (10, 60, 120, 40);
    cutoffSlider.setBounds(270, 60, 120, 40);
    
    resizer->setBounds (getWidth() - 16, getHeight() - 16, 16, 16);
    
    getProcessor()->lastUIWidth = getWidth();
    getProcessor()->lastUIHeight = getHeight();
}

//==============================================================================
// This timer periodically checks whether any of the filter's parameters have changed...
void JbcfilterAudioProcessorEditor::timerCallback()
{
    JbcfilterAudioProcessor* ourProcessor = getProcessor();
    
    AudioPlayHead::CurrentPositionInfo newPos (ourProcessor->lastPosInfo);
    
    if (lastDisplayedPosition != newPos)
        displayPositionInfo (newPos);
    
    delaySlider.setValue (ourProcessor->delay, dontSendNotification);
    delaySlider.setValue(ourProcessor->delay, dontSendNotification);
}

// This is our Slider::Listener callback, when the user drags a slider.
void JbcfilterAudioProcessorEditor::sliderValueChanged (Slider* slider)
{
    if (slider == &delaySlider)
    {
        getProcessor()->setParameterNotifyingHost (JbcfilterAudioProcessor::delayParam,
                                                   (float) delaySlider.getValue());
    }
    else if (slider == &cutoffSlider)
    {
        getProcessor()->setParameterNotifyingHost(JbcfilterAudioProcessor::cutoffParam,
                                                  (float) cutoffSlider.getValue());
    }
     
}




//==============================================================================
// quick-and-dirty function to format a timecode string
static const String timeToTimecodeString (const double seconds)
{
    const double absSecs = fabs (seconds);
    
    const int hours = (int) (absSecs / (60.0 * 60.0));
    const int mins = ((int) (absSecs / 60.0)) % 60;
    const int secs = ((int) absSecs) % 60;
    
    String s (seconds < 0 ? "-" : "");
    
    s << String (hours).paddedLeft ('0', 2) << ":"
    << String (mins) .paddedLeft ('0', 2) << ":"
    << String (secs) .paddedLeft ('0', 2) << ":"
    << String (roundToInt (absSecs * 1000) % 1000).paddedLeft ('0', 3);
    
    return s;
}

// quick-and-dirty function to format a bars/beats string
static const String ppqToBarsBeatsString (double ppq, double /*lastBarPPQ*/, int numerator, int denominator)
{
    if (numerator == 0 || denominator == 0)
        return "1|1|0";
    
    const int ppqPerBar = (numerator * 4 / denominator);
    const double beats = (fmod (ppq, ppqPerBar) / ppqPerBar) * numerator;
    
    const int bar = ((int) ppq) / ppqPerBar + 1;
    const int beat = ((int) beats) + 1;
    const int ticks = ((int) (fmod (beats, 1.0) * 960.0 + 0.5));
    
    String s;
    s << bar << '|' << beat << '|' << ticks;
    return s;
}

// Updates the text in our position label.
void JbcfilterAudioProcessorEditor::displayPositionInfo (const AudioPlayHead::CurrentPositionInfo& pos)
{
    lastDisplayedPosition = pos;
    String displayText;
    displayText.preallocateBytes (128);
    
    displayText << String (pos.bpm, 2) << " bpm, "
    << pos.timeSigNumerator << '/' << pos.timeSigDenominator
    << " - " << timeToTimecodeString (pos.timeInSeconds)
    << " - " << ppqToBarsBeatsString (pos.ppqPosition, pos.ppqPositionOfLastBarStart,
                                      pos.timeSigNumerator, pos.timeSigDenominator);
    
    if (pos.isRecording)
        displayText << " (recording)";
    else if (pos.isPlaying)
        displayText << " (playing)";
    
    infoLabel.setText (displayText, dontSendNotification);
}